const natural = require('natural'),
    readline = require('readline'),
    porterStemmer = natural.PorterStemmerRu,
    classifier = new natural.BayesClassifier(porterStemmer);

const { NlpManager } = require('node-nlp');
const manager = new NlpManager({ languages: ['ru'] });

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const data=require("./data/tehn.json");
//natural.PorterStemmerRu.attach();

watch=async (i)=>{
    if(data.comments[i]!==undefined){
        console.log(data.comments[i].comment)
        rl.question('—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π?', function(answer){
            switch (answer){
                case '1':
                    //classifier.addDocument(data.comments[i].comment, "Rel");
                    manager.addDocument('ru', data.comments[i].comment, 'Rel');
                    console.log('—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ')
                    break;
                case '2':
                    //classifier.addDocument(data.comments[i].comment, "NoN");
                    manager.addDocument('ru', data.comments[i].comment, 'NoN');
                    console.log('–Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ')
                    break;
                default:
                    //classifier.addDocument(data.comments[i].comment, "—Å–ø–∞–º");
                    manager.addDocument('ru', data.comments[i].comment, 'Spam');
                    console.log('—Å–ø–∞–º')
                    break;
            }
            watch(i+1);
        })
    }else{
        await manager.train();
        manager.save('classifierNew.json');
        //classifier.train();
        /*const response = await manager.process('ru', '–Æ–ª–∞');
        console.log(response);
        const response = await manager.process('ru', '–í XSpace. –ö –ò–ª–æ–Ω—É –ú–∞—Å–∫—É.');
        console.log(response);
        const response = await manager.process('ru', '–ê–≤–∏—Ç–æ –≤–æ–æ–±—â–µ –±–æ–º–±–∏—Ç—å —á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è');
        console.log(response);
        const response = await manager.process('ru', '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å üßìüèºüë¥üèº —Å–¥–µ–ª–∞–µ–º —á—É—Ç—å - —á—É—Ç—å –¥–æ–±—Ä–∞!');
        console.log(response);
        const response = await manager.process('ru', 'mail.ru group');
        console.log(response);
        classifier.save('classifier.json', function(err, classifier) {
            if(err){
                console.log(err)
            }else{
                console.log('–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ —Ñ–∞–π–ª')
            }
        });
        */

    }
}
watch(0);



